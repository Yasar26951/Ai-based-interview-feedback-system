<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>InterviewAI Pro | Welcome</title>
  <script src="https://cdn.tailwindcss.com"></script>
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css" />
  <link href="https://fonts.googleapis.com/css2?family=Plus+Jakarta+Sans:wght@300;400;500;600;700;800&display=swap" rel="stylesheet">
  <style>
    body {
      font-family: 'Plus Jakarta Sans', sans-serif;
      background-color: #080B15;
      color: #fff;
      overflow-x: hidden;
    }
    
    .premium-gradient {
      background: linear-gradient(135deg, #8A2BE2 0%, #4169E1 100%);
    }
    
    .premium-text-gradient {
      background: linear-gradient(135deg, #8A2BE2 0%, #4169E1 100%);
      -webkit-background-clip: text;
      -webkit-text-fill-color: transparent;
      background-clip: text;
      text-fill-color: transparent;
    }
    
    .glass-card {
      background: rgba(255, 255, 255, 0.05);
      backdrop-filter: blur(10px);
      -webkit-backdrop-filter: blur(10px);
      border: 1px solid rgba(255, 255, 255, 0.1);
    }
    
    .pulse-glow {
      animation: pulse-glow 3s infinite;
    }
    
    @keyframes pulse-glow {
      0% { box-shadow: 0 0 5px 0 rgba(138, 43, 226, 0.5); }
      50% { box-shadow: 0 0 20px 5px rgba(138, 43, 226, 0.7); }
      100% { box-shadow: 0 0 5px 0 rgba(138, 43, 226, 0.5); }
    }
    
    .float-animation {
      animation: float 8s ease-in-out infinite;
    }
    
    @keyframes float {
      0% { transform: translateY(0px) rotate(0deg); }
      50% { transform: translateY(-20px) rotate(2deg); }
      100% { transform: translateY(0px) rotate(0deg); }
    }
    
    .shimmer {
      position: relative;
      overflow: hidden;
    }
    
    .shimmer::after {
      content: '';
      position: absolute;
      top: -100%;
      left: -100%;
      right: -100%;
      bottom: -100%;
      background: linear-gradient(
        135deg,
        rgba(255, 255, 255, 0) 0%,
        rgba(255, 255, 255, 0.03) 30%,
        rgba(255, 255, 255, 0.1) 50%,
        rgba(255, 255, 255, 0.03) 70%,
        rgba(255, 255, 255, 0) 100%
      );
      transform: rotate(45deg) translate(0, 0);
      animation: shimmer 3s infinite linear;
    }
    
    @keyframes shimmer {
      0% { transform: rotate(45deg) translate(-100%, -100%); }
      100% { transform: rotate(45deg) translate(100%, 100%); }
    }
    
    .cta-button {
      position: relative;
      z-index: 1;
      overflow: hidden;
    }
    
    .cta-button::before {
      content: '';
      position: absolute;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      background: linear-gradient(45deg, #8A2BE2, #4169E1, #8A2BE2);
      z-index: -1;
      background-size: 200% 200%;
      animation: gradient-shift 5s ease infinite;
    }
    
    @keyframes gradient-shift {
      0% { background-position: 0% 50%; }
      50% { background-position: 100% 50%; }
      100% { background-position: 0% 50%; }
    }
    
    .neon-border {
      position: relative;
    }
    
    .neon-border::before {
      content: '';
      position: absolute;
      top: -2px;
      left: -2px;
      right: -2px;
      bottom: -2px;
      background: linear-gradient(45deg, #8A2BE2, #4169E1, #8A2BE2);
      z-index: -1;
      border-radius: inherit;
      animation: animate-border 3s linear infinite;
    }
    
    @keyframes animate-border {
      0% { filter: blur(3px); opacity: 0.8; }
      50% { filter: blur(5px); opacity: 1; }
      100% { filter: blur(3px); opacity: 0.8; }
    }
    
    .bounce-in {
      animation: bounce-in 1s cubic-bezier(0.175, 0.885, 0.32, 1.275) forwards;
      opacity: 0;
      transform: scale(0.3);
    }
    
    @keyframes bounce-in {
      0% { opacity: 0; transform: scale(0.3); }
      50% { opacity: 1; transform: scale(1.05); }
      70% { transform: scale(0.9); }
      100% { transform: scale(1); opacity: 1; }
    }
    
    .fade-in {
      animation: fade-in 0.8s ease forwards;
      opacity: 0;
    }
    
    @keyframes fade-in {
      0% { opacity: 0; transform: translateY(20px); }
      100% { opacity: 1; transform: translateY(0); }
    }
    
    .fade-in-delay-1 {
      animation-delay: 0.2s;
    }
    
    .fade-in-delay-2 {
      animation-delay: 0.4s;
    }
    
    .fade-in-delay-3 {
      animation-delay: 0.6s;
    }
    
    .fade-in-delay-4 {
      animation-delay: 0.8s;
    }
    
    .aurora {
      position: absolute;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      background: linear-gradient(45deg, rgba(138, 43, 226, 0.1), rgba(65, 105, 225, 0.1));
      filter: blur(150px);
      pointer-events: none;
      z-index: -1;
      transform: translateY(-50%);
      opacity: 0.6;
    }
    
    .typing-effect {
      overflow: hidden;
      border-right: 0.15em solid #8A2BE2;
      white-space: nowrap;
      margin: 0 auto;
      animation: 
        typing 3.5s steps(40, end),
        blink-caret 0.75s step-end infinite;
    }
    
    @keyframes typing {
      from { width: 0 }
      to { width: 100% }
    }
    
    @keyframes blink-caret {
      from, to { border-color: transparent }
      50% { border-color: #8A2BE2 }
    }
    
    .hovering-card {
      transition: all 0.5s ease;
      transform-style: preserve-3d;
    }
    
    .hovering-card:hover {
      transform: translateY(-10px) rotateX(2deg) rotateY(2deg);
      box-shadow: 0 20px 30px rgba(0, 0, 0, 0.3);
    }
    
    .particle {
      position: absolute;
      border-radius: 50%;
      background: radial-gradient(circle at center, rgba(138, 43, 226, 0.8) 0%, rgba(138, 43, 226, 0) 70%);
      pointer-events: none;
      z-index: -1;
    }
    
    .highlight-shadow {
      box-shadow: 0 0 30px rgba(138, 43, 226, 0.4);
    }
  </style>
</head>

<body class="min-h-screen flex items-center justify-center p-4">
  <div class="aurora"></div>
  <div class="aurora" style="transform: translateY(30%); opacity: 0.4;"></div>
  <!-- Add this near the top of your welcome page body -->


  <!-- Floating elements -->
  <div class="fixed top-20 left-10 w-24 h-24 premium-gradient opacity-10 rounded-full float-animation"></div>
  <div class="fixed bottom-20 right-10 w-32 h-32 premium-gradient opacity-10 rounded-full float-animation" style="animation-delay: 1s"></div>
  <div class="fixed top-1/3 right-20 w-16 h-16 premium-gradient opacity-10 rounded-full float-animation" style="animation-delay: 2s"></div>
  
  <!-- Main container -->
  <div class="container max-w-5xl mx-auto">
    <!-- Header -->
    <div class="text-center mb-12 bounce-in">
      <div class="flex justify-center items-center mb-6">
        <div class="w-14 h-14 premium-gradient rounded-lg flex items-center justify-center pulse-glow">
          <i class="fas fa-robot text-white text-xl"></i>
        </div>
        <span class="font-bold text-3xl text-white ml-3">InterviewAI<span class="premium-text-gradient font-extrabold">Pro</span></span>
      </div>
      <h1 class="text-3xl md:text-4xl font-bold mb-4">Welcome to Your Interview Preparation</h1>
      <p class="text-xl text-gray-300 max-w-3xl mx-auto typing-effect">Get started with personalized AI interview practice</p>
    </div>
    
    <!-- Two cards layout -->
    <div class="grid md:grid-cols-2 gap-8 mb-16">
      <!-- Start New Session Card -->
      <div class="glass-card rounded-xl border border-white/10 overflow-hidden hovering-card fade-in fade-in-delay-1 highlight-shadow">
        <div class="p-8">
          <div class="w-16 h-16 premium-gradient rounded-full flex items-center justify-center mb-6">
            <i class="fas fa-plus text-white text-xl"></i>
          </div>
          <h2 class="text-2xl font-bold mb-4">Start New Session</h2>
          <p class="text-gray-300 mb-8">Begin a new interview practice session tailored to your experience and target role.</p>
          
          <form id="newSessionForm" class="space-y-6">
            <div>
              <label for="name" class="block text-sm font-medium text-gray-300 mb-2">Your Name</label>
              <input type="text" id="name" name="name" required class="w-full px-4 py-3 bg-white/5 border border-white/10 rounded-lg focus:outline-none focus:ring-2 focus:ring-[#8A2BE2] text-white" placeholder="Enter your name">
            </div>
            
            <button type="submit" class="w-full cta-button text-white font-semibold px-6 py-3 rounded-lg">
              Create New Session
              <i class="fas fa-arrow-right ml-2"></i>
            </button>
          </form>
          


        </div>
      </div>
      
      <!-- Continue Session Card -->
      <div class="glass-card rounded-xl border border-white/10 overflow-hidden hovering-card fade-in fade-in-delay-2">
        <div class="p-8">
          <div class="w-16 h-16 bg-white/10 rounded-full flex items-center justify-center mb-6 border border-white/20">
            <i class="fas fa-history text-white text-xl"></i>
          </div>
          <h2 class="text-2xl font-bold mb-4">Continue Session</h2>
          <p class="text-gray-300 mb-8">Resume your previous interview practice using your unique session ID.</p>
          
          <form id="continueSessionForm" action="/continue-session" method="POST" class="space-y-6">

          <div>
              <label for="uniqueId" class="block text-sm font-medium text-gray-300 mb-2">Session ID</label>
              <input type="text" id="uniqueId" name="uniqueId" required class="w-full px-4 py-3 bg-white/5 border border-white/10 rounded-lg focus:outline-none focus:ring-2 focus:ring-[#8A2BE2] text-white" placeholder="Enter your session ID">
            </div>
            
            <button type="submit" class="w-full bg-white/10 hover:bg-white/20 text-white font-semibold px-6 py-3 rounded-lg border border-white/10 transition-all duration-300">
              Continue Session
              <i class="fas fa-arrow-right ml-2"></i>
            </button>
          </form>
        </div>
      </div>
    </div>
    
    <!-- Features section -->
    <div class="glass-card rounded-xl border border-white/10 p-8 mb-12 fade-in fade-in-delay-3">
      <h3 class="text-xl font-semibold mb-6 flex items-center">
        <i class="fas fa-star text-[#8A2BE2] mr-2"></i>
        What you'll get in your practice session
      </h3>
      
      <div class="grid md:grid-cols-3 gap-6">
        <div class="bg-white/5 rounded-lg p-4 border border-white/10">
          <div class="flex items-center mb-3">
            <div class="w-10 h-10 premium-gradient rounded-full flex items-center justify-center mr-3">
              <i class="fas fa-microphone text-white"></i>
            </div>
            <h4 class="font-medium">Voice Recognition</h4>
          </div>
          <p class="text-sm text-gray-400">Speak your answers naturally and get real-time transcription.</p>
        </div>
        
        <div class="bg-white/5 rounded-lg p-4 border border-white/10">
          <div class="flex items-center mb-3">
            <div class="w-10 h-10 premium-gradient rounded-full flex items-center justify-center mr-3">
              <i class="fas fa-brain text-white"></i>
            </div>
            <h4 class="font-medium">AI-Powered Questions</h4>
          </div>
          <p class="text-sm text-gray-400">Get personalized questions based on your experience and target role.</p>
        </div>
        
        <div class="bg-white/5 rounded-lg p-4 border border-white/10">
          <div class="flex items-center mb-3">
            <div class="w-10 h-10 premium-gradient rounded-full flex items-center justify-center mr-3">
              <i class="fas fa-chart-line text-white"></i>
            </div>
            <h4 class="font-medium">Performance Analysis</h4>
          </div>
          <p class="text-sm text-gray-400">Receive detailed feedback on your answers and communication style.</p>
        </div>
      </div>
    </div>
    
    <!-- Important note -->
    <div class="glass-card rounded-xl border border-[#8A2BE2]/30 p-6 mb-12 neon-border fade-in fade-in-delay-4">
      <div class="flex items-start">
        <div class="flex-shrink-0">
          <i class="fas fa-info-circle text-[#8A2BE2] text-xl mt-1"></i>
        </div>
        <div class="ml-4">
          <h3 class="text-lg font-semibold mb-2">Important: Save Your Session ID</h3>
          <p class="text-gray-300">After creating a new session, you'll receive a unique ID. Please save this ID in a secure place if you wish to continue your session later. We'll display this ID after session creation.</p>
        </div>
      </div>
    </div>
    
    <!-- Footer -->
    <div class="text-center text-gray-400 text-sm">
      <p>&copy; 2025 InterviewAI Pro. All rights reserved.</p>
      <div class="flex justify-center mt-4 space-x-6">
        <a href="/" class="hover:text-white transition-colors">Home</a>
        <a href="#" class="hover:text-white transition-colors">Privacy Policy</a>
        <a href="#" class="hover:text-white transition-colors">Terms of Service</a>
        <a href="#" class="hover:text-white transition-colors">Help</a>
      </div>
    </div>
  </div>
  
<!-- Session Created Success Modal (keep this in your welcome page) -->
<div id="successModal" class="fixed inset-0 bg-black/70 flex items-center justify-center z-50 hidden" data-redirect="/dashboard">
  <div class="glass-card rounded-xl border border-[#8A2BE2]/50 p-8 max-w-md mx-auto neon-border shimmer">
    <div class="text-center">
      <div class="w-20 h-20 premium-gradient rounded-full flex items-center justify-center mx-auto mb-6 pulse-glow">
        <i class="fas fa-check text-white text-2xl"></i>
      </div>
      
      <h3 class="text-2xl font-bold mb-4">Session Created!</h3>
      <p class="text-gray-300 mb-6">Your interview session has been created successfully.</p>
      
      <div class="bg-white/5 border border-[#8A2BE2]/30 rounded-lg p-4 mb-8">
        <p class="text-sm text-gray-400 mb-2">Your unique session ID:</p>
        <div class="bg-[#0d121f] border border-[#8A2BE2]/20 rounded-lg p-3 flex items-center justify-between">
          <code id="sessionIdDisplay" class="text-xl font-mono text-white">ABC12345</code>
          <button id="copyButton" class="text-[#8A2BE2] hover:text-white transition-colors">
            <i class="fas fa-copy"></i>
          </button>
        </div>
        <p class="text-xs text-[#8A2BE2] mt-2">Please save this ID to continue your session later</p>
      </div>
      
      <a href="/dashboard" class="cta-button text-white font-semibold px-6 py-3 rounded-lg inline-block w-full">
        Continue to Dashboard
        <i class="fas fa-arrow-right ml-2"></i>
      </a>
    </div>
  </div>
</div>

  <!-- Error Message Toast (hidden by default) -->
  <div id="errorToast" class="fixed bottom-4 right-4 bg-red-500/90 text-white px-4 py-3 rounded-lg shadow-lg hidden">
    <div class="flex items-center">
      <i class="fas fa-exclamation-circle mr-2"></i>
      <span id="errorMessage">Error message here</span>
      <button id="closeError" class="ml-4 text-white/80 hover:text-white">
        <i class="fas fa-times"></i>
      </button>
    </div>
  </div>
<script>
  document.addEventListener('DOMContentLoaded', function() {
  // Animation for particles
  function createParticle() {
    const particle = document.createElement('div');
    particle.className = 'particle';
    
    // Random position
    const x = Math.random() * window.innerWidth;
    const y = Math.random() * window.innerHeight;
    
    // Random size
    const size = Math.random() * 10 + 5;
    
    // Set styles
    particle.style.width = `${size}px`;
    particle.style.height = `${size}px`;
    particle.style.left = `${x}px`;
    particle.style.top = `${y}px`;
    particle.style.opacity = Math.random() * 0.3 + 0.1;
    
    document.body.appendChild(particle);
    
    // Remove after animation
    setTimeout(() => {
      document.body.removeChild(particle);
    }, 10000);
  }
  
  // Create particles periodically
  setInterval(createParticle, 1000);
  
  // Form handling for new session
  const newSessionForm = document.getElementById('newSessionForm');
  const successModal = document.getElementById('successModal');
  const sessionIdDisplay = document.getElementById('sessionIdDisplay');
  const copyButton = document.getElementById('copyButton');
  
  // New session form submission
  newSessionForm.addEventListener('submit', function(e) {
    e.preventDefault();
    const nameInput = document.getElementById('name');
    
    if (nameInput.value.trim() === '') {
      showError('Please enter your name');
      return;
    }
    
    // Create form data for submission
    const formData = new FormData();
    formData.append('name', nameInput.value.trim());
    
    // Send AJAX request to create session
    fetch('/api/start-new', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({ name: nameInput.value.trim() })
    })
    .then(response => {
      if (!response.ok) {
        throw new Error('Network response was not ok');
      }
      return response.json();
    })
    .then(data => {
      if (data.success) {
        // Display the unique ID in the modal
        sessionIdDisplay.textContent = data.uniqueId;
        
        // Show success modal
        successModal.classList.remove('hidden');
        
        // Store the redirect URL for later use
        successModal.setAttribute('data-redirect', data.redirectUrl);
      } else {
        showError(data.error || 'An error occurred');
      }
    })
    .catch(error => {
      console.error('Error:', error);
      showError('Failed to create session. Please try again.');
    });
  });
  
  // Continue to dashboard after showing modal
  const dashboardLink = document.querySelector('a[href="/dashboard"]');
  if (dashboardLink) {
    dashboardLink.addEventListener('click', function(e) {
      e.preventDefault();
      const redirectUrl = successModal.getAttribute('data-redirect') || '/dashboard';
      window.location.href = redirectUrl;
    });
  }
  
  // Copy to clipboard functionality
  copyButton.addEventListener('click', function() {
    const textToCopy = sessionIdDisplay.textContent;
    navigator.clipboard.writeText(textToCopy).then(function() {
      copyButton.innerHTML = '<i class="fas fa-check"></i>';
      setTimeout(() => {
        copyButton.innerHTML = '<i class="fas fa-copy"></i>';
      }, 2000);
    }).catch(function() {
      showError('Failed to copy to clipboard');
    });
  });
  
  // Continue session form handling
  const continueSessionForm = document.getElementById('continueSessionForm');
  continueSessionForm.addEventListener('submit', function(e) {
    e.preventDefault();
    const uniqueIdInput = document.getElementById('uniqueId');
    
    if (uniqueIdInput.value.trim() === '') {
      showError('Please enter your session ID');
      return;
    }
    
    // Send AJAX request to continue session
    fetch('/api/continue-session', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({ uniqueId: uniqueIdInput.value.trim() })
    })
    .then(response => {
      if (!response.ok) {
        if (response.status === 404) {
          throw new Error('Session not found. Please check your ID.');
        }
        throw new Error('Network response was not ok');
      }
      return response.json();
    })
    .then(data => {
      if (data.success) {
        window.location.href = data.redirectUrl || '/dashboard';
      } else {
        showError(data.error || 'Session not found');
      }
    })
    .catch(error => {
      console.error('Error:', error);
      showError(error.message || 'Failed to continue session. Please try again.');
    });
  });
  
  // Error toast functionality
  function showError(message) {
    const errorToast = document.getElementById('errorToast');
    const errorMessage = document.getElementById('errorMessage');
    
    errorMessage.textContent = message;
    errorToast.classList.remove('hidden');
    
    setTimeout(() => {
      errorToast.classList.add('hidden');
    }, 5000);
  }
  
  // Close error button
  const closeErrorBtn = document.getElementById('closeError');
  if (closeErrorBtn) {
    closeErrorBtn.addEventListener('click', function() {
      document.getElementById('errorToast').classList.add('hidden');
    });
  }
  
  // Close modal when clicking outside
  window.addEventListener('click', function(e) {
    if (e.target === successModal) {
      successModal.classList.add('hidden');
    }
  });
  
  // Show error message if present in URL parameters
  const urlParams = new URLSearchParams(window.location.search);
  const errorParam = urlParams.get('error');
  if (errorParam) {
    showError(decodeURIComponent(errorParam));
  }
  
  // Add keyboard accessibility
  document.addEventListener('keydown', function(e) {
    // ESC key closes modal
    if (e.key === "Escape") {
      successModal.classList.add('hidden');
      document.getElementById('errorToast').classList.add('hidden');
    }
    
    // Enter key on copy button triggers copy
    if (e.key === "Enter" && document.activeElement === copyButton) {
      copyButton.click();
    }
  });
  
  // Make sure all interactive elements are properly focusable
  const focusableElements = document.querySelectorAll('button, a, input');
  focusableElements.forEach(element => {
    if (!element.hasAttribute('tabindex')) {
      element.setAttribute('tabindex', '0');
    }
  });
});
</script>
</body>
</html>